#! /usr/bin/env python3
"""
Author: Tiger Sachse
Version: 1.0.0
Release: 30 November 2017
"""
import os
import random
import database
from sqlite3 import OperationalError

def gen_chars():
    """
    Generates all ASCII chars the user might need, minus a few chars that break
    the program.
    """
    bad_ASCII = [34, 36, 92, 96]
    return [chr(char) for char in range(32, 127) if char not in bad_ASCII]

def gen_rotors(count):
    """
    Generates a rotor string by shuffling the possible ASCII chars. Repeats
    count many times and returns a list of all generated rotors.
    """
    chars = gen_chars()
    rotors = []
    for rotor in range(0, count):
        random.shuffle(chars)
        rotors.append(''.join(chars))
    return rotors

def gen_simple_board(remaining):
    """
    Since the reflector and plugboard are so similar they are generated by the
    same function. Returns a string with unique paired characters separated by
    spaces. The space char cannot be included because it is used to separate
    the pairs, so it is removed.
    """
    chars = gen_chars()
    chars.remove(' ')
    board = []
    while len(chars) > remaining:
        pair = random.sample(chars, 2)
        chars.remove(pair[0])
        chars.remove(pair[1])
        board.append(pair[0] + pair[1])
    return ' '.join(board)

def gen_chart():
    """
    Generates a dictionary that includes 31 rows of data to cover 31 days.
    """
    chart = {'rotors': [],
             'positions': [],
             'reflector': [],
             'plugboard': []}
    for day in range(0, 31):
        chart['rotors'].append(random.sample(range(0, 5), 3))
        chart['positions'].append(random.sample(range(0, 91), 3))
        chart['reflector'].append(gen_simple_board(0))
        chart['plugboard'].append(gen_simple_board(20))
    return chart

def populate_database():
    chart = gen_chart()
    rotors = gen_rotors(5)
    database.populate(chart, rotors)

# MAIN PROGRAM #
try:
    database.create()
except OperationalError:
    os.remove(database.F_ENIGMA_DATA)
    database.create()

populate_database()
